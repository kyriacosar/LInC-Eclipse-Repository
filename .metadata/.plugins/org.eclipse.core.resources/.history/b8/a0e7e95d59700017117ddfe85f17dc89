'''
Created on Jul 21, 2017

@author: kyriacos
'''

import json
import math

if __name__ == '__main__':
    e_file_in = open("../../../../Documents/Crunchbase Project Data/FacePlusPlus/Crunchbase Results/Data Dictionaries/Crunchbase_Entrepreneurs_FaceLandmarks_Dictionaries.json", "r")
    e_file_in_att = open("../../../../Documents/Crunchbase Project Data/FacePlusPlus/Crunchbase Results/Data Dictionaries/Crunchbase_Entrepreneurs_FaceAttributes_Dictionaries.json", "r")
    e_file_out = open("../../../../Documents/Crunchbase Project Data/FacePlusPlus/Crunchbase Results/Data Extraction/Crunchbase_Entrepreneurs_FHWR_Reduced.txt", "w")
    
    e_file_out.write("FHWR of Entrepreneurs with reduced yaw and pitch range [-10, 10]:\n\n")
    
        # Initialize variables.
    pos = 0
    height_sum = 0
    width_sum = 0
    ratio_sum = 0
    count = 0
        
    e_file_out.write("ID\t\t\t\t\tRatio\n")
    e_file_out.write("-"*36+"\t"+"-"*14+"\n")
    
    for record in e_file_in:   
        try:
            # Reading the JSON formatted face attributes records.
            
            # Converting the JSON record to a dictionary and isolating the ID field.
            jDict = json.loads(record)
            jID = jDict['_id']
             
            # Converting the face attributes JSON record to a dictionary and isolating the yaw and pitch field.
            poseRecord = e_file_in_att.readline()
            poseDict = json.loads(poseRecord)            
            yaw = math.fabs(poseDict['attributes']['headpose']['yaw_angle'])
            pitch = math.fabs(poseDict['attributes']['headpose']['pitch_angle'])
            
            if yaw >= -10 and yaw <= 10 and pitch >= -10 and pitch <= 10:
                contour_left_x = jDict['landmark']['contour_left1']['x']
                contour_left_y = jDict['landmark']['contour_left1']['y']
                contour_right_x = jDict['landmark']['contour_right1']['x']
                contour_right_y = jDict['landmark']['contour_right1']['y']
                upper_lip_top_x = jDict['landmark']['mouth_upper_lip_top']['x']
                upper_lip_top_y = jDict['landmark']['mouth_upper_lip_top']['y']
                left_eyebrow_x = jDict['landmark']['left_eyebrow_right_corner']['x']
                left_eyebrow_y = jDict['landmark']['left_eyebrow_right_corner']['y']
                right_eyebrow_x = jDict['landmark']['right_eyebrow_left_corner']['x']
                right_eyebrow_y = jDict['landmark']['right_eyebrow_left_corner']['y']
                
                # Calculating eyebrow mid point.
                mid_eyebrow_x = (left_eyebrow_x + right_eyebrow_x)/2
                mid_eyebrow_y = (left_eyebrow_y + right_eyebrow_y)/2 
                
                # Calculating face height by using the distance between two points formula.
                partX = math.pow((upper_lip_top_x - mid_eyebrow_x), 2)
                partY = math.pow((upper_lip_top_y - mid_eyebrow_y), 2)
                height = math.sqrt(partY+partX)
                
                # Using the Pythagorean theorem to adjust face height based on yaw.
                height = math.sqrt(math.pow(height,2)+math.pow(yaw, 2))
                
                # Adding the height to a sum in order to calculate the average height.
                height_sum += height
                
                # Calculating face width by using the distance between two points formula.
                partX = math.pow((contour_left_x - contour_right_x), 2)
                partY = math.pow((contour_left_y - contour_right_y), 2)
                width = math.sqrt(partY+partX)
                
                # Using the Pythagorean theorem to adjust face width based on yaw.
                width = math.sqrt(math.pow(width,2)+math.pow(yaw, 2))
                
                # Adding the width to a sum in order to calculate the average width.
                width_sum += width
                
                # Calculating FHWR.
                ratio = height / width
                
                # Adding the ratio to a sum in order to calculate the average ratio.
                ratio_sum += ratio
                
                count += 1
        
                # Based on the ID length, the right amount of tabs are written to the output file.
                if str(jDict['_id']).__len__() >= 16:
                    e_file_out.write(str(jDict['_id'])+"\t"+str(ratio)+"\n")
                elif str(jDict['_id']).__len__() >= 8:
                    e_file_out.write(str(jDict['_id'])+"\t\t"+str(ratio)+"\n")
                else:
                    e_file_out.write(str(jDict['_id'])+"\t\t\t"+str(ratio)+"\n")            
        except ValueError:
            print("Error in json to dictionary translation.")
            
    # Calculating the average height, width and FHWR and writting in the output file.
    e_file_out.write("\nAverage ratio: "+str(ratio_sum/count))